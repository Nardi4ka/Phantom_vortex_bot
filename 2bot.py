import discord
from discord import app_commands
import json
import os
import asyncio
import re
from flask import Flask
from collections import defaultdict
from datetime import datetime, timedelta
import threading

# ===== –ù–ê–°–¢–†–û–ô–ö–ê –ë–û–¢–ê =====
intents = discord.Intents.default()
intents.message_content = True
intents.members = True

class MyBot(discord.Client):
    def __init__(self):
        super().__init__(intents=intents)
        self.tree = app_commands.CommandTree(self)

    async def setup_hook(self):
        await self.tree.sync()
        print("‚úÖ –°–ª–µ—à-–∫–æ–º–∞–Ω–¥—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")

bot = MyBot()

# ===== –°–ò–°–¢–ï–ú–ê –ú–û–î–ï–†–ê–¶–ò–ò PHANTOM VORTEX =====
class PhantomVortexModSystem:
    def __init__(self):
        self.advertising_words = [
            '–∫—É–ø–∏—Ç—å', '–ø—Ä–æ–¥–∞–º', '—Ä–µ–∫–ª–∞–º–∞', '–ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è', '–º–æ–π –∫–∞–Ω–∞–ª',
            'discord.gg/', 'http://', 'https://', '–±–µ—Å–ø–ª–∞—Ç–Ω–æ', '—Å–∫–∏–¥–∫–∞'
        ]
        
        self.explicit_words = [
            '—Å–µ–∫—Å', '–ø–æ—Ä–Ω–æ', 'xxx', 'porn', 'onlyfans', '–∏–Ω—Ç–∏–º'
        ]
        
        self.threats_words = [
            '—É–±—å—é', '–∑–∞—Ä–µ–∂—É', '–∏–∑–æ–±—å—é', '—Å–¥–æ—Ö–Ω–∏', '–≤–µ—à–∞–π—Å—è', '—Å—É–∏—Ü–∏–¥'
        ]
        
        self.discrimination_words = [
            '–Ω–∏–≥–µ—Ä', '–Ω–∏–≥–≥–µ—Ä', '—á—É—Ä–∫–∞', '—Ö–∞—á', '–∂–∏–¥', '–ø–∏–¥–æ—Ä–∞—Å'
        ]

    async def analyze_message(self, message):
        if message.author.bot:
            return None
        
        content = message.content.lower()
        
        # üî¥ –£–ì–†–û–ó–´ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º
        if any(threat in content for threat in self.threats_words):
            await self.report_to_moderators(message, "–£–ì–†–û–ó–ê", content)
            return "REPORT_ONLY"
        
        # üî¥ –î–ò–°–ö–†–ò–ú–ò–ù–ê–¶–ò–Ø - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º  
        if any(disc in content for disc in self.discrimination_words):
            await self.report_to_moderators(message, "–î–ò–°–ö–†–ò–ú–ò–ù–ê–¶–ò–Ø", content)
            return "REPORT_ONLY"
        
        # üîµ –ê–í–¢–û–ú–û–î–ï–†–ê–¶–ò–Ø: –¢–æ–ª—å–∫–æ —Ä–µ–∫–ª–∞–º–∞ –∏ –ø–ª–æ—Ö–∏–µ —Å–ª–æ–≤–∞
        if any(ad in content for ad in self.advertising_words):
            return "ADVERTISING"
            
        if any(explicit in content for explicit in self.explicit_words):
            return "EXPLICIT"
            
        return None

    async def report_to_moderators(self, message, violation_type, content):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–ø–æ—Ä—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º"""
        mod_channel = discord.utils.get(message.guild.channels, name="üõ°Ô∏è-—Ä–µ–ø–æ—Ä—Ç—ã-–º–æ–¥–µ—Ä–∞—Ü–∏–∏")
        if not mod_channel:
            overwrites = {
                message.guild.default_role: discord.PermissionOverwrite(read_messages=False),
                message.guild.me: discord.PermissionOverwrite(read_messages=True)
            }
            for role in message.guild.roles:
                if role.permissions.manage_messages or role.permissions.administrator:
                    overwrites[role] = discord.PermissionOverwrite(read_messages=True, send_messages=True)
            
            mod_channel = await message.guild.create_text_channel("üõ°Ô∏è-—Ä–µ–ø–æ—Ä—Ç—ã-–º–æ–¥–µ—Ä–∞—Ü–∏–∏", overwrites=overwrites)
        
        embed = discord.Embed(
            title=f"üö® –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {violation_type}",
            color=0xff9900,
            timestamp=datetime.now()
        )
        embed.add_field(name="–ê–≤—Ç–æ—Ä", value=message.author.mention, inline=True)
        embed.add_field(name="–ö–∞–Ω–∞–ª", value=message.channel.mention, inline=True)
        embed.add_field(name="–¢–∏–ø", value=violation_type, inline=True)
        embed.add_field(name="–°–æ–æ–±—â–µ–Ω–∏–µ", value=f"```{content[:500]}```", inline=False)
        
        await mod_channel.send(embed=embed)
        await mod_channel.send("@here")

    async def apply_punishment(self, user, violation_type, channel, reason=""):
        """–¢–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞—Ä—É—à–µ–Ω–∏–π"""
        if violation_type in ["REPORT_ONLY"]:
            return
            
        if violation_type == "ADVERTISING":
            await channel.send(f"üö´ {user.mention} —Ä–µ–∫–ª–∞–º–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–∞! –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.")
        
        elif violation_type == "EXPLICIT":
            await channel.send(f"üö´ {user.mention} –∫–æ–Ω—Ç–µ–Ω—Ç 18+ –∑–∞–ø—Ä–µ—â–µ–Ω! –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.")

mod_system = PhantomVortexModSystem()

# ===== –°–ò–°–¢–ï–ú–ê –°–û–•–†–ê–ù–ï–ù–ò–Ø –ö–û–ú–ê–ù–î =====
def load_teams():
    if os.path.exists('teams.json'):
        try:
            with open('teams.json', 'r', encoding='utf-8') as f:
                return json.load(f)
        except:
            return {}
    return {}

def save_teams():
    with open('teams.json', 'w', encoding='utf-8') as f:
        json.dump(registered_teams, f, ensure_ascii=False, indent=2)

registered_teams = load_teams()

# ===== –°–ò–°–¢–ï–ú–ê –ü–†–ò–ì–õ–ê–®–ï–ù–ò–ô =====
class TeamMemberSelect(discord.ui.UserSelect):
    def __init__(self, team_role_id):
        super().__init__(placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã...", max_values=4)
        self.team_role_id = team_role_id
    
    async def callback(self, interaction: discord.Interaction):
        role = interaction.guild.get_role(self.team_role_id)
        for user in self.values:
            await user.add_roles(role)
        
        await interaction.response.send_message(
            f"‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω—ã –≤ –∫–æ–º–∞–Ω–¥—É: {', '.join([user.mention for user in self.values])}",
            ephemeral=True
        )

class OpponentMemberSelect(discord.ui.UserSelect):
    def __init__(self, opponent_role_id):
        super().__init__(placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤...", max_values=5)
        self.opponent_role_id = opponent_role_id
    
    async def callback(self, interaction: discord.Interaction):
        role = interaction.guild.get_role(self.opponent_role_id)
        for user in self.values:
            await user.add_roles(role)
        
        await interaction.response.send_message(
            f"üÜö –ü—Ä–∏–≥–ª–∞—à–µ–Ω—ã –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∏: {', '.join([user.mention for user in self.values])}",
            ephemeral=True
        )

class TeamInviteView(discord.ui.View):
    def __init__(self, team_role_id):
        super().__init__(timeout=60)
        self.team_role_id = team_role_id
        self.add_item(TeamMemberSelect(team_role_id))

class OpponentInviteView(discord.ui.View):
    def __init__(self, opponent_role_id):
        super().__init__(timeout=60)
        self.opponent_role_id = opponent_role_id
        self.add_item(OpponentMemberSelect(opponent_role_id))

class ClashInviteView(discord.ui.View):
    def __init__(self, team_role_id, opponent_role_id, team_name):
        super().__init__(timeout=None)
        self.team_role_id = team_role_id
        self.opponent_role_id = opponent_role_id
        self.team_name = team_name
    
    @discord.ui.button(label='‚ûï –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å —Å–≤–æ—é –∫–æ–º–∞–Ω–¥—É', style=discord.ButtonStyle.success, custom_id='invite_team_btn')
    async def invite_team(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.send_message(
            f"**üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ —Å–≤–æ—é –∫–æ–º–∞–Ω–¥—É:**\n"
            f"–£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–æ–ª—É—á–∞—Ç —Ä–æ–ª—å <@&{self.team_role_id}>\n"
            f"–ò —Å–º–æ–≥—É—Ç –∑–∞–π—Ç–∏ –≤ –≤–∞—à –∫–ª–æ–∑!",
            view=TeamInviteView(self.team_role_id),
            ephemeral=True
        )
    
    @discord.ui.button(label='üÜö –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤', style=discord.ButtonStyle.danger, custom_id='invite_opponents_btn')
    async def invite_opponents(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.send_message(
            f"**üÜö –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤:**\n"
            f"–û–Ω–∏ –ø–æ–ª—É—á–∞—Ç —Ä–æ–ª—å <@&{self.opponent_role_id}>\n"
            f"–ò —Å–º–æ–≥—É—Ç –∑–∞–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤!",
            view=OpponentInviteView(self.opponent_role_id),
            ephemeral=True
        )

# ===== –ú–û–î–ê–õ–¨–ù–´–ï –û–ö–ù–ê –ò –§–£–ù–ö–¶–ò–ò =====
class RegistrationModal(discord.ui.Modal, title='üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã'):
    team_name = discord.ui.TextInput(label='–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã', placeholder='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã...', max_length=50)
    captain_name = discord.ui.TextInput(label='–ò–º—è –∫–∞–ø–∏—Ç–∞–Ω–∞', placeholder='–í–∞—à –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫–Ω–µ–π–º...', max_length=30)
    game_choice = discord.ui.TextInput(
        label='–ò–≥—Ä–∞ (Dota 2 / CS2)', 
        placeholder='–ù–∞–ø–∏—à–∏—Ç–µ Dota 2 –∏–ª–∏ CS2...', 
        max_length=10
    )

    async def on_submit(self, interaction: discord.Interaction):
        user_id = str(interaction.user.id)
        
        game = self.game_choice.value.strip().lower()
        if game not in ['dota 2', 'cs2']:
            await interaction.response.send_message(
                "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∏–≥—Ä–∞! –í—ã–±–µ—Ä–∏—Ç–µ: **Dota 2** –∏–ª–∏ **CS2**", 
                ephemeral=True
            )
            return
        
        if user_id in registered_teams:
            await interaction.response.send_message(
                f"‚ùå –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ **{registered_teams[user_id]['team_name']}**!", 
                ephemeral=True
            )
            return
        
        registered_teams[user_id] = {
            'team_name': self.team_name.value,
            'captain': self.captain_name.value,
            'game': game
        }
        save_teams()
        
        embed = discord.Embed(
            title="‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", 
            description=f"–ö–æ–º–∞–Ω–¥–∞ **{self.team_name.value}** –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!", 
            color=0x2ecc71
        )
        embed.add_field(name="üëë –ö–∞–ø–∏—Ç–∞–Ω:", value=self.captain_name.value, inline=True)
        embed.add_field(name="üéÆ –ò–≥—Ä–∞:", value=game.upper(), inline=True)
        await interaction.response.send_message(embed=embed, ephemeral=True)

# ===== –§–£–ù–ö–¶–ò–Ø –°–û–ó–î–ê–ù–ò–Ø –ü–û–õ–ù–û–¶–ï–ù–ù–û–ì–û –ö–õ–û–ó–ê =====
async def create_full_clash(interaction: discord.Interaction, team_name: str, captain_name: str, game_type: str):
    game_display_names = {
        "dota 2": "Dota 2",
        "cs2": "CS2"
    }
    
    game_display = game_display_names.get(game_type.lower(), game_type.upper())
    category_name = f"üéÆ {game_display} | {captain_name}"
    
    team_role = await interaction.guild.create_role(
        name=f"üë• {team_name}",
        color=discord.Color.green(),
        hoist=True
    )
    
    opponent_role = await interaction.guild.create_role(
        name=f"‚öîÔ∏è {team_name}",
        color=discord.Color.red(),
        hoist=True
    )
    
    overwrites = {
        interaction.guild.default_role: discord.PermissionOverwrite(read_messages=False, connect=False),
        team_role: discord.PermissionOverwrite(read_messages=True, connect=True, send_messages=True),
        opponent_role: discord.PermissionOverwrite(read_messages=True, connect=True, send_messages=True),
        interaction.guild.me: discord.PermissionOverwrite(read_messages=True, connect=True, send_messages=True)
    }
    
    category = await interaction.guild.create_category(
        name=category_name,
        overwrites=overwrites
    )
    
    info_channel = await category.create_text_channel(f"üìã-{team_name}-–∏–Ω—Ñ–æ")
    chat_channel = await category.create_text_channel(f"üí¨-{team_name}-—á–∞—Ç")
    invite_channel = await category.create_text_channel(f"üì©-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è")
    
    ally_voice = await category.create_voice_channel(
        name=f"üü¢-—Å–æ—é–∑–Ω–∏–∫–∏-{team_name}",
        user_limit=5
    )
    
    enemy_voice = await category.create_voice_channel(
        name=f"üî¥-–ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∏-{team_name}",
        user_limit=5
    )
    
    await interaction.user.add_roles(team_role)
    
    invite_embed = discord.Embed(
        title=f"üéÆ –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–æ–∑–æ–º {team_name}",
        description="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
        color=0x9b59b6
    )
    invite_embed.add_field(name="üü¢ –°–æ—é–∑–Ω–∏–∫–∏", value="–í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞", inline=True)
    invite_embed.add_field(name="üî¥ –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫–∏", value="–ö–æ–º–∞–Ω–¥–∞ –æ–ø–ø–æ–Ω–µ–Ω—Ç–æ–≤", inline=True)
    invite_embed.add_field(name="üéÆ –ò–≥—Ä–∞", value=game_display, inline=True)
    
    await invite_channel.send(embed=invite_embed, view=ClashInviteView(team_role.id, opponent_role.id, team_name))
    
    sources_embed = discord.Embed(
        title="üìö –ü–æ–ª–µ–∑–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏",
        color=0x3498db
    )
    
    if game_type.lower() == "dota 2":
        sources_embed.description = "**–î–ª—è Dota 2:**"
        sources_embed.add_field(
            name="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞",
            value="‚Ä¢ [DotaBuff](https://www.dotabuff.com)\n‚Ä¢ [Stratz](https://stratz.com)\n‚Ä¢ [Dota2ProTracker](https://www.dota2protracker.com)",
            inline=False
        )
    elif game_type.lower() == "cs2":
        sources_embed.description = "**–î–ª—è CS2:**"
        sources_embed.add_field(
            name="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞", 
            value="‚Ä¢ [HLTV](https://www.hltv.org)\n‚Ä¢ [Leetify](https://leetify.com)\n‚Ä¢ [ScopeGG](https://scope.gg)",
            inline=False
        )
    
    sources_message = await info_channel.send(embed=sources_embed)
    await sources_message.pin()
    
    asyncio.create_task(delete_close_after_delay(category, 4 * 60 * 60))
    
    return category

# ===== –§–£–ù–ö–¶–ò–Ø –ê–í–¢–û–£–î–ê–õ–ï–ù–ò–Ø –ö–õ–û–ó–û–í =====
async def delete_close_after_delay(category, delay_seconds):
    await asyncio.sleep(delay_seconds)
    
    try:
        for role in category.guild.roles:
            if "üë•" in role.name or "‚öîÔ∏è" in role.name:
                role_team_name = role.name.split(' ', 1)[1] if ' ' in role.name else role.name
                if role_team_name in category.name:
                    await role.delete()
        
        for channel in category.channels:
            await channel.delete()
        
        await category.delete()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–æ–∑–∞: {e}")

# ===== –û–°–ù–û–í–ù–ê–Ø –ü–ê–ù–ï–õ–¨ =====
class MainPanelView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)
    
    @discord.ui.button(label='üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã', style=discord.ButtonStyle.primary, custom_id='phantom_register_1')
    async def register_team(self, interaction: discord.Interaction, button: discord.ui.Button):
        try:
            await interaction.response.send_modal(RegistrationModal())
        except Exception as e:
            await interaction.response.send_message(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–æ—Ä–º—ã: {e}", ephemeral=True)
    
    @discord.ui.button(label='üéÆ –°–æ–∑–¥–∞—Ç—å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –∫–ª–æ–∑', style=discord.ButtonStyle.success, custom_id='phantom_create_2')
    async def create_full_clash(self, interaction: discord.Interaction, button: discord.ui.Button):
        try:
            user_id = str(interaction.user.id)
            
            if user_id not in registered_teams:
                await interaction.response.send_message("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É!", ephemeral=True)
                return
            
            team_data = registered_teams[user_id]
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–æ–∑
            category = await create_full_clash(interaction, team_data['team_name'], team_data['captain'], team_data['game'])
            
            await interaction.response.send_message(f"‚úÖ –ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –∫–ª–æ–∑ —Å–æ–∑–¥–∞–Ω! {category.mention}", ephemeral=True)
            
        except Exception as e:
            await interaction.response.send_message(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", ephemeral=True)
    
    @discord.ui.button(label='üìä –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥', style=discord.ButtonStyle.secondary, custom_id='phantom_list_3')
    async def show_teams(self, interaction: discord.Interaction, button: discord.ui.Button):
        try:
            if not registered_teams:
                await interaction.response.send_message("üìä –ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è", ephemeral=True)
                return
            
            teams_text = ""
            for user_id, team_data in registered_teams.items():
                user = await bot.fetch_user(int(user_id))
                username = user.name if user else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
                teams_text += f"‚Ä¢ **{team_data['team_name']}** ({team_data['game'].upper()}) - {username}\n"
            
            embed = discord.Embed(
                title="üìä –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã",
                description=teams_text,
                color=0x2ecc71
            )
            await interaction.response.send_message(embed=embed, ephemeral=True)
            
        except Exception as e:
            await interaction.response.send_message(f"‚ùå –û—à–∏–±–∫–∞: {e}", ephemeral=True)

# ===== –ü–ê–ù–ï–õ–¨ –ú–û–î–ï–†–ê–¶–ò–ò =====
class AdminPanelView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)
    
    @discord.ui.button(label='üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫–∏', style=discord.ButtonStyle.primary, custom_id='admin_view_1')
    async def view_applications(self, interaction: discord.Interaction, button: discord.ui.Button):
        if not registered_teams:
            await interaction.response.send_message("‚ùå –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.", ephemeral=True)
            return
        
        embed = discord.Embed(title="üìã –í—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã", color=0x3498db)
        for user_id, team_data in registered_teams.items():
            user = await bot.fetch_user(int(user_id))
            username = user.name if user else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
            embed.add_field(
                name=f"üè∑Ô∏è {team_data['team_name']} ({team_data['game'].upper()})", 
                value=f"–ö–∞–ø–∏—Ç–∞–Ω: {username}", 
                inline=False
            )
        
        embed.set_footer(text=f"–í—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥: {len(registered_teams)}")
        await interaction.response.send_message(embed=embed, ephemeral=True)
    
    @discord.ui.button(label='üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤ —Ñ–∞–π–ª', style=discord.ButtonStyle.secondary, custom_id='admin_export_2')
    async def export_teams(self, interaction: discord.Interaction, button: discord.ui.Button):
        if not registered_teams:
            await interaction.response.send_message("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.", ephemeral=True)
            return
        
        filename = f"teams_export_{datetime.now().strftime('%Y%m%d_%H%M')}.txt"
        with open(filename, 'w', encoding='utf-8') as f:
            for user_id, team_data in registered_teams.items():
                user = await bot.fetch_user(int(user_id))
                username = user.name if user else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
                f.write(f"–ö–æ–º–∞–Ω–¥–∞: {team_data['team_name']} | –ò–≥—Ä–∞: {team_data['game']} | –ö–∞–ø–∏—Ç–∞–Ω: {username}\n")
        
        await interaction.response.send_message(file=discord.File(filename), ephemeral=True)
        os.remove(filename)
    
    @discord.ui.button(label='üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∑–∞—è–≤–∫–∏', style=discord.ButtonStyle.danger, custom_id='admin_clear_3')
    async def clear_all(self, interaction: discord.Interaction, button: discord.ui.Button):
        if not registered_teams:
            await interaction.response.send_message("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—á–∏—Å—Ç–∫–∏.", ephemeral=True)
            return
        
        confirm_view = ConfirmClearView()
        await interaction.response.send_message("‚ö†Ô∏è –£–¥–∞–ª–∏—Ç—å –í–°–ï –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã?", view=confirm_view, ephemeral=True)

class ConfirmClearView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=30)
    
    @discord.ui.button(label='‚úÖ –î–∞', style=discord.ButtonStyle.danger)
    async def confirm_clear(self, interaction: discord.Interaction, button: discord.ui.Button):
        global registered_teams
        count = len(registered_teams)
        registered_teams = {}
        save_teams()
        await interaction.response.send_message(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {count} –∫–æ–º–∞–Ω–¥!", ephemeral=True)
    
    @discord.ui.button(label='‚ùå –ù–µ—Ç', style=discord.ButtonStyle.secondary)
    async def cancel_clear(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.send_message("‚ùå –û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", ephemeral=True)

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô =====
@bot.event
async def on_ready():
    print(f'‚úÖ –ë–æ—Ç {bot.user} –∑–∞–ø—É—â–µ–Ω!')
    print(f'‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–æ–º–∞–Ω–¥: {len(registered_teams)}')

@bot.event
async def on_message(message):
    violation = await mod_system.analyze_message(message)
    if violation:
        await message.delete()
        await mod_system.apply_punishment(message.author, violation, message.channel)
    
    await bot.process_commands(message)

# ===== –ö–û–ú–ê–ù–î–´ =====
@bot.tree.command(name="panel", description="üìä –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞–Ω–µ–ª—å –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤")
async def setup_panel(interaction: discord.Interaction):
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("‚ùå –ù–µ—Ç –ø—Ä–∞–≤!", ephemeral=True)
        return
    
    embed = discord.Embed(title="üéÆ –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–∞–º–∏", description="–í—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞", color=0x9b59b6)
    embed.add_field(name="üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã", value="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º", inline=False)
    embed.add_field(name="üéÆ –°–æ–∑–¥–∞—Ç—å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –∫–ª–æ–∑", value="–ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω–∞—è –∏–≥—Ä–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞ —Å —Ä–æ–ª—è–º–∏, –≤–æ–π—Å–∞–º–∏ –∏ –ø–∞–Ω–µ–ª—è–º–∏", inline=False)
    embed.add_field(name="üìä –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥", value="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã", inline=False)
    
    await interaction.channel.send(embed=embed, view=MainPanelView())
    await interaction.response.send_message("‚úÖ –ü–∞–Ω–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!", ephemeral=True)

@bot.tree.command(name="modpanel", description="üõ†Ô∏è –ü–∞–Ω–µ–ª—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏")
@app_commands.checks.has_permissions(administrator=True)
async def admin_panel(interaction: discord.Interaction):
    embed = discord.Embed(title="üõ†Ô∏è –ü–∞–Ω–µ–ª—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏", description="–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∞–º–∏", color=0xe74c3c)
    embed.add_field(name="üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫–∏", value="–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥", inline=False)
    embed.add_field(name="üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤ —Ñ–∞–π–ª", value="–°–∫–∞—á–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥", inline=False)
    embed.add_field(name="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∑–∞—è–≤–∫–∏", value="–ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã", inline=False)
    
    await interaction.channel.send(embed=embed, view=AdminPanelView())
    await interaction.response.send_message("‚úÖ –ü–∞–Ω–µ–ª—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!", ephemeral=True)

@bot.tree.command(name="warn", description="–í—ã–¥–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ")
@app_commands.checks.has_permissions(manage_messages=True)
async def warn_user(interaction: discord.Interaction, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: discord.Member, –ø—Ä–∏—á–∏–Ω–∞: str):
    await mod_system.apply_punishment(–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, "ADVERTISING", interaction.channel, –ø—Ä–∏—á–∏–Ω–∞)
    await interaction.response.send_message(f"‚úÖ {–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.mention} –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", ephemeral=True)

@bot.tree.command(name="clear_warns", description="–°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è")
@app_commands.checks.has_permissions(administrator=True)
async def clear_warnings(interaction: discord.Interaction, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: discord.Member):
    embed = discord.Embed(title="‚úÖ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã", color=0x2ecc71)
    embed.add_field(name="–£—á–∞—Å—Ç–Ω–∏–∫", value=–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.mention, inline=True)
    await interaction.response.send_message(embed=embed, ephemeral=True)

# ===== –ú–û–ù–ò–¢–û–†–ò–ù–ì =====
app = Flask(__name__)

@app.route('/')
def home():
    return "ALIVE", 200

def run_server():
    app.run(host='0.0.0.0', port=5000, debug=False, use_reloader=False)

flask_thread = threading.Thread(target=run_server)
flask_thread.daemon = True
flask_thread.start()
print("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 5000")

# ===== –ó–ê–ü–£–°–ö =====
bot.run(os.getenv('TOKEN'))





