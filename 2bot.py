import discord
from discord import app_commands
import json
import os
import asyncio
import re
from datetime import datetime, timedelta
from collections import defaultdict

# ===== –ù–ê–°–¢–†–û–ô–ö–ê –ë–û–¢–ê =====
intents = discord.Intents.default()
intents.message_content = True
intents.members = True

class MyBot(discord.Client):
    def __init__(self):
        super().__init__(intents=intents)
        self.tree = app_commands.CommandTree(self)

    async def setup_hook(self):
        await self.tree.sync()
        print("‚úÖ –°–ª–µ—à-–∫–æ–º–∞–Ω–¥—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")

bot = MyBot()

# ===== –°–ò–°–¢–ï–ú–ê –ú–û–î–ï–†–ê–¶–ò–ò PHANTOM VORTEX =====
class PhantomVortexModSystem:
    def __init__(self):
        self.user_warnings = defaultdict(int)
        self.warning_timestamps = defaultdict(list)
        self.spam_detection = defaultdict(list)
    
    async def analyze_message(self, message):
        if message.author.bot:
            return None
        
        violations = []
        
        # –£—Ä–æ–≤–µ–Ω—å 4: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è
        if await self.check_level4_violations(message):
            return "LEVEL4"
        
        # –£—Ä–æ–≤–µ–Ω—å 3: –°–µ—Ä—å–µ–∑–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è
        if await self.check_level3_violations(message):
            violations.append("LEVEL3")
        
        # –£—Ä–æ–≤–µ–Ω—å 2: –°—Ä–µ–¥–Ω–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è
        if await self.check_level2_violations(message):
            violations.append("LEVEL2")
        
        # –£—Ä–æ–≤–µ–Ω—å 1: –õ–µ–≥–∫–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è
        if await self.check_level1_violations(message):
            violations.append("LEVEL1")
        
        return violations[0] if violations else None
    
    async def check_level4_violations(self, message):
        content = message.content.lower()
        threats = ['—É–±—å—é', '–∑–∞—Ä–µ–∂—É', '–∏–∑–æ–±—å—é', '–≤–µ—à–∞–π—Å—è', '—Å—É–∏—Ü–∏–¥', '—Å–¥–æ—Ö–Ω–∏']
        discrimination = ['–Ω–∏–≥–µ—Ä', '–Ω–∏–≥–≥–µ—Ä', '—á—É—Ä–∫–∞', '—Ö–∞—á', '–∂–∏–¥', '–ø–∏–¥–æ—Ä–∞—Å']
        
        if (any(threat in content for threat in threats) or 
            any(disc_word in content for disc_word in discrimination) or
            re.search(r'\b\d{11,}\b', content)):
            return True
        return False
    
    async def check_level3_violations(self, message):
        content = message.content.lower()
        personal_insults = ['–º—É–¥–∞–∫', '–º—É–¥–∏–ª–∞', '–¥–µ–±–∏–ª', '–¥–æ–ª–±–æ—ë–±', '—É–±–ª—é–¥–æ–∫', '–≥–æ–≤–Ω–æ–µ–¥']
        advertising = ['–ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è', '–º–æ–π –∫–∞–Ω–∞–ª', '–∫—É–ø–∏—Ç—å', '–ø—Ä–æ–¥–∞–º', '—Ä–µ–∫–ª–∞–º–∞']
        
        if (any(insult in content for insult in personal_insults) or
            any(ad in content for ad in advertising) or
            await self.detect_targeted_trolling(message)):
            return True
        return False
    
    async def check_level2_violations(self, message):
        content = message.content.lower()
        nsfw_words = ['—Å–µ–∫—Å', '–ø–æ—Ä–Ω–æ', '–≥–æ–ª—ã–π', '–æ–±–Ω–∞–∂–µ–Ω–Ω—ã–π']
        cheat_words = ['—á–∏—Ç—ã', '—á–∏—Ç–µ—Ä', '–≤–∑–ª–æ–º', '–ø–∞–±–ª–∏–∫ —á–∏—Ç']
        mentions = message.mentions + message.role_mentions
        
        if (any(nsfw in content for nsfw in nsfw_words) or
            any(cheat in content for cheat in cheat_words) or
            len(mentions) >= 3):
            return True
        return False
    
    async def check_level1_violations(self, message):
        if await self.detect_spam(message) or await self.detect_off_topic(message):
            return True
        return False
    
    async def detect_spam(self, message):
        user_id = message.author.id
        now = datetime.now()
        self.spam_detection[user_id].append(now)
        self.spam_detection[user_id] = [t for t in self.spam_detection[user_id] if now - t < timedelta(seconds=10)]
        return len(self.spam_detection[user_id]) >= 5
    
    async def detect_targeted_trolling(self, message):
        if message.reference:
            try:
                replied_msg = await message.channel.fetch_message(message.reference.message_id)
                if replied_msg.author != message.author:
                    negative_words = ['–¥—É—Ä–∞–∫', '–∏–¥–∏–æ—Ç', '—Ç—É–ø–æ–π', '—Å–ª–∞–±—ã–π']
                    return any(word in message.content.lower() for word in negative_words)
            except:
                pass
        return False
    
    async def detect_off_topic(self, message):
        channel_name = message.channel.name.lower()
        if '–º—É–∑—ã–∫–∞' in channel_name and not await self.is_music_related(message.content):
            return True
        return False
    
    async def is_music_related(self, content):
        music_words = ['–ø–µ—Å–Ω—è', '—Ç—Ä–µ–∫', '–∞–ª—å–±–æ–º', '–º—É–∑—ã–∫–∞', '—Å–ª—É—à–∞—Ç—å']
        return any(word in content.lower() for word in music_words)
    
    async def apply_punishment(self, user, violation_level, channel, reason=""):
        user_id = user.id
        now = datetime.now()
        
        self.warning_timestamps[user_id].append(now)
        self.warning_timestamps[user_id] = [t for t in self.warning_timestamps[user_id] if now - t < timedelta(days=10)]
        active_warns = len(self.warning_timestamps[user_id])
        
        log_channel = discord.utils.get(channel.guild.channels, name="üìã-–ª–æ–≥–∏-–º–æ–¥–µ—Ä–∞—Ü–∏–∏")
        if not log_channel:
            overwrites = {channel.guild.default_role: discord.PermissionOverwrite(read_messages=False)}
            log_channel = await channel.guild.create_text_channel("üìã-–ª–æ–≥–∏-–º–æ–¥–µ—Ä–∞—Ü–∏–∏", overwrites=overwrites)
        
        embed = discord.Embed(title="üö® –ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª", color=0xe74c3c, timestamp=now)
        embed.add_field(name="–£—á–∞—Å—Ç–Ω–∏–∫", value=user.mention, inline=True)
        embed.add_field(name="–£—Ä–æ–≤–µ–Ω—å", value=violation_level, inline=True)
        embed.add_field(name="–ê–∫—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–Ω—ã", value=f"{active_warns}/3", inline=True)
        embed.add_field(name="–ü—Ä–∏—á–∏–Ω–∞", value=reason or "–ê–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏—è", inline=False)
        
        if violation_level == "LEVEL4":
            try:
                await user.ban(reason=f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ: {reason}")
                embed.add_field(name="–ù–∞–∫–∞–∑–∞–Ω–∏–µ", value="üî® –ü–µ—Ä–º–∞–±–∞–Ω", inline=False)
            except:
                embed.add_field(name="–û—à–∏–±–∫–∞", value="–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–∞–Ω–∏—Ç—å", inline=False)
        
        elif violation_level == "LEVEL3":
            for _ in range(2):
                self.warning_timestamps[user_id].append(now)
            try:
                await user.timeout(timedelta(days=3), reason=f"–°–µ—Ä—å–µ–∑–Ω–æ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ: {reason}")
                embed.add_field(name="–ù–∞–∫–∞–∑–∞–Ω–∏–µ", value="üîá –ú—É—Ç 3 –¥–Ω—è + 2 –≤–∞—Ä–Ω–∞", inline=False)
            except:
                embed.add_field(name="–ù–∞–∫–∞–∑–∞–Ω–∏–µ", value="2 –≤–∞—Ä–Ω–∞", inline=False)
        
        elif violation_level == "LEVEL2":
            try:
                await user.timeout(timedelta(hours=6), reason=f"–°—Ä–µ–¥–Ω–µ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ: {reason}")
                embed.add_field(name="–ù–∞–∫–∞–∑–∞–Ω–∏–µ", value="üîá –ú—É—Ç 6 —á–∞—Å–æ–≤ + –≤–∞—Ä–Ω", inline=False)
            except:
                embed.add_field(name="–ù–∞–∫–∞–∑–∞–Ω–∏–µ", value="1 –≤–∞—Ä–Ω", inline=False)
        
        elif violation_level == "LEVEL1":
            embed.add_field(name="–ù–∞–∫–∞–∑–∞–Ω–∏–µ", value="‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", inline=False)
        
        if active_warns >= 3:
            try:
                await user.ban(reason="–ê–≤—Ç–æ–±–∞–Ω: 3 –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è")
                embed.add_field(name="üî® –ê–≤—Ç–æ–±–∞–Ω", value="3 –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–∞—Ä–Ω–∞", inline=False)
            except:
                pass
        
        await log_channel.send(embed=embed)
        
        if violation_level in ["LEVEL2", "LEVEL3", "LEVEL4"]:
            await channel.send(f"üö® {user.mention} –ø–æ–ª—É—á–∏–ª –Ω–∞–∫–∞–∑–∞–Ω–∏–µ. –î–µ—Ç–∞–ª–∏ –≤ {log_channel.mention}")

mod_system = PhantomVortexModSystem()

# ===== –°–ò–°–¢–ï–ú–ê –°–û–•–†–ê–ù–ï–ù–ò–Ø –ö–û–ú–ê–ù–î =====
def load_teams():
    if os.path.exists('teams.json'):
        try:
            with open('teams.json', 'r', encoding='utf-8') as f:
                return json.load(f)
        except:
            return {}
    return {}

def save_teams():
    with open('teams.json', 'w', encoding='utf-8') as f:
        json.dump(registered_teams, f, ensure_ascii=False, indent=2)

registered_teams = load_teams()

# ===== –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ö–õ–û–ó–û–í =====
class MainPanelView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)
    
    @discord.ui.button(label='üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã', style=discord.ButtonStyle.primary, custom_id='register_btn')
    async def register_team(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.send_modal(RegistrationModal())
    
    @discord.ui.button(label='üéÆ –°–æ–∑–¥–∞—Ç—å –∫–ª–æ–∑', style=discord.ButtonStyle.success, custom_id='create_clash_btn')
    async def create_clash(self, interaction: discord.Interaction, button: discord.ui.Button):
        user_id = str(interaction.user.id)
        if user_id not in registered_teams:
            await interaction.response.send_message("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É!", ephemeral=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–æ–∑—ã
        for category in interaction.guild.categories:
            team_name = registered_teams[user_id]
            if f"‚öîÔ∏è {team_name}" in category.name:
                await interaction.response.send_message("‚ùå –£ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–æ–∑!", ephemeral=True)
                return
        
        team_name = registered_teams[user_id]
        await self.create_clash_channels(interaction, team_name)
    
    @discord.ui.button(label='üìä –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥', style=discord.ButtonStyle.secondary, custom_id='teams_list_btn')
    async def show_teams(self, interaction: discord.Interaction, button: discord.ui.Button):
        if not registered_teams:
            embed = discord.Embed(title="üìä –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥", description="–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è", color=0xf39c12)
            await interaction.response.send_message(embed=embed, ephemeral=True)
            return
        
        teams_list = "\n".join([f"‚Ä¢ **{name}**" for name in registered_teams.values()])
        embed = discord.Embed(title="üìä –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã", description=teams_list, color=0x2ecc71)
        embed.add_field(name="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:", value=f"–í—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥: **{len(registered_teams)}**", inline=False)
        await interaction.response.send_message(embed=embed, ephemeral=True)
    
    async def create_clash_channels(self, interaction: discord.Interaction, team_name: str):
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–æ–∑ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ—Ç–∏–≤ –∫–æ–º–∞–Ω–¥—ã"""
        # –°–æ–∑–¥–∞—ë–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥—ã
        category = await interaction.guild.create_category_channel(name=f"‚öîÔ∏è {team_name}", position=0)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∞–≤ - –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è
        overwrites = {
            interaction.guild.default_role: discord.PermissionOverwrite(read_messages=False, connect=False),
            interaction.user: discord.PermissionOverwrite(
                read_messages=True, send_messages=True, connect=True, manage_channels=True
            ),
            interaction.guild.me: discord.PermissionOverwrite(read_messages=True, send_messages=True, connect=True)
        }
        
        # –¢–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª –¥–ª—è –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤
        text_channel = await category.create_text_channel(name="üí¨-–ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã", overwrites=overwrites)
        
        # –î–í–ê –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥
        voice_team1 = await category.create_voice_channel(
            name=f"üîä {team_name}", 
            overwrites=overwrites,
            user_limit=5  # 5 –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–∞–Ω–¥–µ
        )
        
        voice_team2 = await category.create_voice_channel(
            name="üîä –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞", 
            overwrites=overwrites,
            user_limit=5  # 5 –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–∞–Ω–¥–µ
        )
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        embed = discord.Embed(
            title=f"‚öîÔ∏è –ö–ª–æ–∑ —Å–æ–∑–¥–∞–Ω: {team_name}",
            description="**–î–ª—è –∏–≥—Ä—ã –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Ç–∏–≤ –∫–æ–º–∞–Ω–¥—ã:**",
            color=0x9b59b6
        )
        embed.add_field(
            name="üéØ –ö–∞–∫ –∏–≥—Ä–∞—Ç—å:",
            value="‚Ä¢ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ —Å–≤–æ—é –∫–æ–º–∞–Ω–¥—É –≤ –≤–∞—à –≤–æ–π—Å-–∫–∞–Ω–∞–ª\n‚Ä¢ –°–æ–ø–µ—Ä–Ω–∏–∫ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –≤ –∫–∞–Ω–∞–ª '–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞'\n‚Ä¢ –î–æ–≥–æ–≤–∞—Ä–∏–≤–∞–π—Ç–µ—Å—å –æ –º–∞—Ç—á–µ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —á–∞—Ç–µ",
            inline=False
        )
        embed.add_field(
            name="üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:",
            value="‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–∞–≤—ã–º –∫–ª–∏–∫–æ–º –Ω–∞ –∫–∞–Ω–∞–ª\n‚Ä¢ –ö–ª–æ–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–∏—Ç—Å—è —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞",
            inline=False
        )
        
        await text_channel.send(
            content=f"üëã {interaction.user.mention}, –∫–ª–æ–∑ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã **{team_name}** —Å–æ–∑–¥–∞–Ω!",
            embed=embed
        )
        
        await interaction.response.send_message(
            f"‚úÖ –ö–ª–æ–∑ —Å–æ–∑–¥–∞–Ω! {text_channel.mention}\n"
            f"‚Ä¢ {voice_team1.mention} - –≤–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞\n"
            f"‚Ä¢ {voice_team2.mention} - –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞", 
            ephemeral=True
        )
        
        # –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞
        asyncio.create_task(delete_empty_clash(category, 7200))

# ===== –ü–ê–ù–ï–õ–¨ –ú–û–î–ï–†–ê–¶–ò–ò =====
class AdminPanelView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)
    
    @discord.ui.button(label='üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫–∏', style=discord.ButtonStyle.primary, custom_id='view_apps_btn')
    async def view_applications(self, interaction: discord.Interaction, button: discord.ui.Button):
        if not registered_teams:
            await interaction.response.send_message("‚ùå –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.", ephemeral=True)
            return
        
        embed = discord.Embed(title="üìã –í—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã", color=0x3498db)
        for user_id, team_name in registered_teams.items():
            user = await bot.fetch_user(int(user_id))
            username = user.name if user else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
            embed.add_field(name=f"üè∑Ô∏è {team_name}", value=f"–ö–∞–ø–∏—Ç–∞–Ω: {username}", inline=False)
        
        embed.set_footer(text=f"–í—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥: {len(registered_teams)}")
        await interaction.response.send_message(embed=embed, ephemeral=True)
    
    @discord.ui.button(label='üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤ —Ñ–∞–π–ª', style=discord.ButtonStyle.secondary, custom_id='export_btn')
    async def export_teams(self, interaction: discord.Interaction, button: discord.ui.Button):
        if not registered_teams:
            await interaction.response.send_message("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.", ephemeral=True)
            return
        
        filename = f"teams_export_{datetime.now().strftime('%Y%m%d_%H%M')}.txt"
        with open(filename, 'w', encoding='utf-8') as f:
            for user_id, team_name in registered_teams.items():
                user = await bot.fetch_user(int(user_id))
                username = user.name if user else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
                f.write(f"–ö–æ–º–∞–Ω–¥–∞: {team_name} | –ö–∞–ø–∏—Ç–∞–Ω: {username}\n")
        
        await interaction.response.send_message(file=discord.File(filename), ephemeral=True)
        os.remove(filename)
    
    @discord.ui.button(label='üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∑–∞—è–≤–∫–∏', style=discord.ButtonStyle.danger, custom_id='clear_btn')
    async def clear_all(self, interaction: discord.Interaction, button: discord.ui.Button):
        if not registered_teams:
            await interaction.response.send_message("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—á–∏—Å—Ç–∫–∏.", ephemeral=True)
            return
        
        confirm_view = ConfirmClearView()
        await interaction.response.send_message("‚ö†Ô∏è –£–¥–∞–ª–∏—Ç—å –í–°–ï –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã?", view=confirm_view, ephemeral=True)

class ConfirmClearView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=30)
    
    @discord.ui.button(label='‚úÖ –î–∞', style=discord.ButtonStyle.danger)
    async def confirm_clear(self, interaction: discord.Interaction, button: discord.ui.Button):
        global registered_teams
        count = len(registered_teams)
        registered_teams = {}
        save_teams()
        await interaction.response.send_message(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {count} –∫–æ–º–∞–Ω–¥!", ephemeral=True)
    
    @discord.ui.button(label='‚ùå –ù–µ—Ç', style=discord.ButtonStyle.secondary)
    async def cancel_clear(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.send_message("‚ùå –û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", ephemeral=True)

# ===== –ú–û–î–ê–õ–¨–ù–´–ï –û–ö–ù–ê –ò –§–£–ù–ö–¶–ò–ò =====
class RegistrationModal(discord.ui.Modal, title='üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã'):
    team_name = discord.ui.TextInput(label='–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã', placeholder='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã...', max_length=50)
    captain_name = discord.ui.TextInput(label='–ò–º—è –∫–∞–ø–∏—Ç–∞–Ω–∞', placeholder='–í–∞—à –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫–Ω–µ–π–º...', max_length=30)

    async def on_submit(self, interaction: discord.Interaction):
        user_id = str(interaction.user.id)
        if user_id in registered_teams:
            await interaction.response.send_message(f"‚ùå –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ **{registered_teams[user_id]}**!", ephemeral=True)
            return
        
        registered_teams[user_id] = self.team_name.value
        save_teams()
        
        embed = discord.Embed(title="‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", description=f"–ö–æ–º–∞–Ω–¥–∞ **{self.team_name.value}** –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!", color=0x2ecc71)
        embed.add_field(name="üëë –ö–∞–ø–∏—Ç–∞–Ω:", value=self.captain_name.value, inline=True)
        await interaction.response.send_message(embed=embed, ephemeral=True)

async def delete_empty_clash(category, delay_seconds):
    await asyncio.sleep(delay_seconds)
    try:
        empty = True
        for channel in category.channels:
            if isinstance(channel, discord.VoiceChannel) and len(channel.members) > 0:
                empty = False
                break
        
        if empty:
            for channel in category.channels:
                await channel.delete()
            await category.delete()
    except:
        pass

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô =====
@bot.event
async def on_ready():
    print(f'‚úÖ –ë–æ—Ç {bot.user} –∑–∞–ø—É—â–µ–Ω!')
    print(f'‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–æ–º–∞–Ω–¥: {len(registered_teams)}')

@bot.event
async def on_message(message):
    violation = await mod_system.analyze_message(message)
    if violation:
        await message.delete()
        await mod_system.apply_punishment(message.author, violation, message.channel)
    await bot.process_commands(message)

# ===== –ö–û–ú–ê–ù–î–´ =====
@bot.tree.command(name="panel", description="üìä –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞–Ω–µ–ª—å –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤")
async def setup_panel(interaction: discord.Interaction):
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("‚ùå –ù–µ—Ç –ø—Ä–∞–≤!", ephemeral=True)
        return
    
    embed = discord.Embed(title="üéÆ –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–∞–º–∏", description="–í—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞", color=0x9b59b6)
    embed.add_field(name="üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã", value="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º", inline=False)
    embed.add_field(name="üéÆ –°–æ–∑–¥–∞—Ç—å –∫–ª–æ–∑", value="–ü—Ä–∏–≤–∞—Ç–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞ –¥–ª—è –º–∞—Ç—á–µ–π –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Ç–∏–≤ –∫–æ–º–∞–Ω–¥—ã", inline=False)
    embed.add_field(name="üìä –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥", value="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã", inline=False)
    
    await interaction.channel.send(embed=embed, view=MainPanelView())
    await interaction.response.send_message("‚úÖ –ü–∞–Ω–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!", ephemeral=True)

@bot.tree.command(name="modpanel", description="üõ†Ô∏è –ü–∞–Ω–µ–ª—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏")
@app_commands.checks.has_permissions(administrator=True)
async def admin_panel(interaction: discord.Interaction):
    embed = discord.Embed(title="üõ†Ô∏è –ü–∞–Ω–µ–ª—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏", description="–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∞–º–∏", color=0xe74c3c)
    embed.add_field(name="üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫–∏", value="–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥", inline=False)
    embed.add_field(name="üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤ —Ñ–∞–π–ª", value="–°–∫–∞—á–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥", inline=False)
    embed.add_field(name="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∑–∞—è–≤–∫–∏", value="–ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã", inline=False)
    
    await interaction.channel.send(embed=embed, view=AdminPanelView())
    await interaction.response.send_message("‚úÖ –ü–∞–Ω–µ–ª—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!", ephemeral=True)

@bot.tree.command(name="warn", description="–í—ã–¥–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ")
@app_commands.checks.has_permissions(manage_messages=True)
async def warn_user(interaction: discord.Interaction, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: discord.Member, –ø—Ä–∏—á–∏–Ω–∞: str):
    await mod_system.apply_punishment(–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, "LEVEL1", interaction.channel, –ø—Ä–∏—á–∏–Ω–∞)
    await interaction.response.send_message(f"‚úÖ {–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.mention} –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", ephemeral=True)

@bot.tree.command(name="clear_warns", description="–°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è")
@app_commands.checks.has_permissions(administrator=True)
async def clear_warnings(interaction: discord.Interaction, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: discord.Member):
    user_id = –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.id
    mod_system.warning_timestamps[user_id] = []
    embed = discord.Embed(title="‚úÖ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã", color=0x2ecc71)
    embed.add_field(name="–£—á–∞—Å—Ç–Ω–∏–∫", value=–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.mention, inline=True)
    await interaction.response.send_message(embed=embed, ephemeral=True)

# ===== –ó–ê–ü–£–°–ö =====
bot.run('–¢–í–û–ô_–¢–û–ö–ï–ù_–ë–û–¢–ê')