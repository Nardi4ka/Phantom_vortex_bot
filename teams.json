{
  # ===== –°–ò–°–¢–ï–ú–ê –°–û–•–†–ê–ù–ï–ù–ò–Ø –ö–û–ú–ê–ù–î =====
def load_teams():
    if os.path.exists('teams.json'):
        try:
            with open('teams.json', 'r', encoding='utf-8') as f:
                data = json.load(f)
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö
            fixed_data = {}
            for key, value in data.items():
                if isinstance(value, dict) and 'team_name' in value:
                    # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                    fixed_data[key] = value
                elif isinstance(value, str):
                    # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –Ω–æ–≤—ã–π
                    fixed_data[key] = {
                        'team_name': value,
                        'captain': '–ù–µ —É–∫–∞–∑–∞–Ω',
                        'game': 'dota 2'
                    }
                else:
                    # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                    continue
                    
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(fixed_data)} –∫–æ–º–∞–Ω–¥ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω —Ñ–æ—Ä–º–∞—Ç)")
            return fixed_data
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ teams.json: {e}")
            return {}
    return {}

def save_teams():
    try:
        with open('teams.json', 'w', encoding='utf-8') as f:
            json.dump(registered_teams, f, ensure_ascii=False, indent=2)
        print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(registered_teams)} –∫–æ–º–∞–Ω–¥")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è teams.json: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
registered_teams = load_teams()
print(f"üìä –í –ø–∞–º—è—Ç–∏: {len(registered_teams)} –∫–æ–º–∞–Ω–¥")

}
